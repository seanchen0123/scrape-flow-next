// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workflow {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  definition    String
  executionPlan String?
  creditsCost   Int       @default(0)
  cron          String?
  status        String // DRAFT, PUBLISHED
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  nextRunAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  executions WorkflowExecution[]

  @@unique([name, userId])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  userId      String
  trigger     String
  status      String
  createAt    DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  definition  String    @default("{}")

  creditsConsumed Int @default(0)

  phases ExecutionPhase[]

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id              String    @id @default(cuid())
  userId          String
  status          String
  number          Int
  node            String
  name            String
  startedAt       DateTime?
  completedAt     DateTime?
  inputs          String?
  outputs         String?
  creditsConsumed Int?

  workflowExecutionId String
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs ExecutionLog[]
}

model ExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId  String @id
  credits Int
}

model Credential {
  id     String @id @default(cuid())
  userId String
  name   String
  value  String

  createdAt DateTime @default(now())

  @@unique([userId, name])
}

model UserPurchase {
  id          String   @id @default(cuid())
  userId      String
  stripeId    String
  description String
  amount      Int
  currency    String
  date        DateTime @default(now())
}

model User {
  id       String    @id @default(cuid())
  username String    @unique // 用户名改为必填且唯一
  email    String?   @unique // 邮箱改为可选
  password String // 密码保持必填
  name     String? // 显示名称可选
  image    String? // 头像可选
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
